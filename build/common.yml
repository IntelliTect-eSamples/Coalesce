jobs:
- job: Meta
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - pwsh: Write-Host "##vso[build.addbuildtag]$(BuildTag)"
    displayName: "Add Build Tag"

  - pwsh: >
      $path = "$(Build.Repository.LocalPath)/build/version.txt";
      Write-Host "Grabbing version from: $path";

      if(![System.IO.File]::Exists($path)){
          Write-Error "File not found!";
      }

      $version = (Get-Content $path).Trim() + "$(VersionSuffix)";
      Write-Host "Version found: $version";

      try
      {
          [System.Management.Automation.SemanticVersion]::Parse($version);
      }
      catch
      {
          Write-Error "'$version' is an invalid SemVer version"
      }

      Write-Host "##vso[task.setvariable variable=COALESCE_VERSION;isOutput=true]$version";

      $version > $(Build.ArtifactStagingDirectory)/coalesce-version.txt

      Write-Host "##vso[build.addbuildtag]$version"
    failOnStderr: true
    name: buildBaseVersion
    displayName: "Verify and set COALESCE_VERSION variable"

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: coalesce-version.txt'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: coalesce-version



- job: 
  displayName: IntelliTect.Coalesce.*
  dependsOn: Meta
  pool:
    vmImage: 'ubuntu-latest'

  variables:
    COALESCE_VERSION: $[ dependencies.Meta.outputs['buildBaseVersion.COALESCE_VERSION'] ]
    
  steps:
  # https://github.com/nodejs/build/issues/2263
  # this might not even be needed anymore
  #- task: NodeTool@0
  #  displayName: 'Use Node 10.x'
  #  inputs:
  #    versionSpec: 10.x

  # Install both 2.2 (for the cli, last version that supports DotnetCliToolReference) and 3.1 (everything else)
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '3.1.x'

  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '2.2.x'


  - task: DotNetCoreCLI@2
    displayName: 'dotnet restore'
    inputs:
      command: restore
      verbosityRestore: normal
      projects: 'src/IntelliTect.Coalesce*/*.csproj'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet build'
    inputs:
      projects: 'src/IntelliTect.Coalesce*/*.csproj'
      arguments: '--configuration $(BuildConfiguration)'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet test'
    inputs:
      command: test
      projects: 'src/IntelliTect.Coalesce*Test*/*.csproj'
      arguments: '--configuration $(BuildConfiguration)'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet pack'
    inputs:
      command: pack
      packagesToPack: 'src/IntelliTect.Coalesce*/*.csproj'
      packDirectory: '$(Build.ArtifactStagingDirectory)/packages'
      nobuild: true
      versioningScheme: byEnvVar
      versionEnvVar: COALESCE_VERSION

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: NuGet Packages'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/packages'
      ArtifactName: packages



- job: 
  displayName: Coalesce.Web (Knockout Demo)
  dependsOn: Meta
  pool:
    vmImage: 'ubuntu-latest'

  variables:
    COALESCE_VERSION: $[ dependencies.Meta.outputs['buildBaseVersion.COALESCE_VERSION'] ]
    dir: src/Coalesce.Web
    csproj: src/Coalesce.Web/Coalesce.Web.csproj
    
  steps:
  # https://github.com/nodejs/build/issues/2263
  # this might not even be needed anymore
  #- task: NodeTool@0
  #  displayName: 'Use Node 10.x'
  #  inputs:
  #    versionSpec: 10.x

  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '3.1.x'

  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '2.2.x'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet restore'
    inputs:
      command: restore
      verbosityRestore: normal
      projects: |
        '$(csproj)'
        src/IntelliTect.Coalesce.Cli/*.csproj

  - script: npm ci
    displayName: 'Coalesce.Web: npm ci'
    workingDirectory: $(dir)

  - script: npx gulp coalesceKo
    displayName: 'Coalesce.Web: npx gulp coalesceKo'
    workingDirectory: $(dir)

  - script: npx gulp copyAll
    displayName: 'Coalesce.Web: npx gulp copyAll'
    workingDirectory: $(dir)

  - task: DotNetCoreCLI@2
    displayName: 'dotnet build'
    inputs:
      projects: '$(csproj)'
      arguments: '--configuration $(BuildConfiguration)'



- job:
  displayName: coalesce-vue
  dependsOn: Meta
  pool:
    vmImage: 'ubuntu-latest'

  variables:
    COALESCE_VERSION: $[ dependencies.Meta.outputs['buildBaseVersion.COALESCE_VERSION'] ]
    PACKAGE_NAME: coalesce-vue
    PACKAGE_DIR: src/$(PACKAGE_NAME)

  steps:
  # https://github.com/nodejs/build/issues/2263
  # this might not even be needed anymore
  #- task: NodeTool@0
  #  displayName: 'Use Node 10.x'
  #  inputs:
  #    versionSpec: 10.x

  - script: npm ci
    displayName: npm ci
    workingDirectory: $(PACKAGE_DIR)

  - script: npm version $(COALESCE_VERSION) --no-git-tag-version
    displayName: npm version $(COALESCE_VERSION) --no-git-tag-version
    workingDirectory: $(PACKAGE_DIR)

  - script: npm run test -- --coverage --reporters=default --reporters=jest-junit
    displayName: npm run test
    workingDirectory: $(PACKAGE_DIR)

  - task: PublishTestResults@2
    displayName: 'Publish Test Results **/junit.xml'
    inputs:
      testResultsFiles: '**/junit.xml'
      testRunTitle: 'coalesce-vue'

  - task: geeklearningio.gl-vsts-tasks-yarn.yarn-task.Yarn@2
    displayName: 'Yarn pack'
    inputs:
      ProjectDirectory: '$(PACKAGE_DIR)'
      Arguments: 'pack -f $(Build.ArtifactStagingDirectory)/coalesce-vue.tgz'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: $(PACKAGE_NAME)'
    inputs:
      ArtifactName: '$(PACKAGE_NAME)'



- job:
  displayName: coalesce-vue-vuetify
  dependsOn: Meta
  pool:
    vmImage: 'ubuntu-latest'

  variables:
    COALESCE_VERSION: $[ dependencies.Meta.outputs['buildBaseVersion.COALESCE_VERSION'] ]
    PACKAGE_NAME: coalesce-vue-vuetify
    PACKAGE_DIR: src/$(PACKAGE_NAME)

  steps:
  # https://github.com/nodejs/build/issues/2263
  # this might not even be needed anymore
  #- task: NodeTool@0
  #  displayName: 'Use Node 10.x'
  #  inputs:
  #    versionSpec: 10.x

  # build coalesce-vue
  - script: npm run build-local-deps
    displayName: npm run build-local-deps
    workingDirectory: $(PACKAGE_DIR)

  - script: npm ci
    displayName: npm ci
    workingDirectory: $(PACKAGE_DIR)

  # coalesce-vue-vuetify currently has no tests. Uncomment when the first ones are added:

  # - script: npm run test -- --coverage --reporters=default --reporters=jest-junit
  #   displayName: npm run test
  #   workingDirectory: $(PACKAGE_DIR)

  # - task: PublishTestResults@2
  #   displayName: 'Publish Test Results **/junit.xml'
  #   inputs:
  #     testResultsFiles: '**/junit.xml'
  #     testRunTitle: '$(PACKAGE_NAME)'

  - script: npm run build
    displayName: npm run build
    workingDirectory: $(PACKAGE_DIR)

  # now we'll setup the real versions of things.
  # Change the package.json with the correct version of coalesce-vue, 
  # but do not use any npm commands to do so as they'll freak out that the version isn't published.
  - script: cat <<< "$(cat package.json | jq '.peerDependencies["coalesce-vue"] = "$(COALESCE_VERSION)" | .devDependencies["coalesce-vue"] = "$(COALESCE_VERSION)" ')" > package.json
    displayName: update *dependencies["coalesce-vue"] version
    workingDirectory: $(PACKAGE_DIR)

  - script: npm version $(COALESCE_VERSION) --no-git-tag-version
    displayName: npm version $(COALESCE_VERSION) --no-git-tag-version
    workingDirectory: $(PACKAGE_DIR)

  # yarn pack is used because it allows specifying an output location. npm pack doesn't.
  - task: geeklearningio.gl-vsts-tasks-yarn.yarn-task.Yarn@2
    displayName: 'Yarn pack'
    inputs:
      ProjectDirectory: '$(PACKAGE_DIR)'
      Arguments: 'pack -f $(Build.ArtifactStagingDirectory)/$(PACKAGE_NAME).tgz'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: $(PACKAGE_NAME)'
    inputs:
      ArtifactName: '$(PACKAGE_NAME)'