import{_ as d,r as p,o as u,c as D,f as c,b as s,d as e,e as n,w as a,a as r}from"./app.33ffcc50.js";const y={},m=s("h1",{id:"model-layer",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#model-layer","aria-hidden":"true"},"#"),e(" Model Layer")],-1),h=s("code",null,"models.g.ts",-1),v=s("code",null,"$metadata",-1),f=s("p",null,[e("The model layer also includes a TypeScript class for each type that can be used to easily instantiate a valid implementation of its corresponding interface. However, it is not necessary for the classes to be used, and all parts of Coalesce that interact with the model layer don't perform any "),s("code",null,"instanceof"),e(" checks against models - the "),s("code",null,"$metadata"),e(" property is used to determine type identity.")],-1),b={class:"table-of-contents"},_=s("h2",{id:"concepts",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#concepts","aria-hidden":"true"},"#"),e(" Concepts")],-1),g={href:"https://github.com/IntelliTect/Coalesce/blob/dev/src/coalesce-vue/src/model.ts",target:"_blank",rel:"noopener noreferrer"},C=s("h3",{id:"model",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#model","aria-hidden":"true"},"#"),e(" Model")],-1),w=s("code",null,"$metadata",-1),E=s("h3",{id:"datasource",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#datasource","aria-hidden":"true"},"#"),e(" DataSource")],-1),T=s("code",null,"$metadata",-1),A=r(`<p>Data sources are generated as concrete classes in a namespace named <code>DataSources</code> that is nested inside a namespace named after their parent model type. For example:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Person</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;@/models.g&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">dataSource</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">Person</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">DataSources</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">NamesStartingWith</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#9CDCFE;">dataSource</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">startsWith</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;A&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#6A9955;">// Provide the dataSource to an API Client or a ViewModel...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="model-functions" tabindex="-1"><a class="header-anchor" href="#model-functions" aria-hidden="true">#</a> Model Functions</h2><p>The following functions exported from <code>coalesce-vue</code> can be used with your models:</p>`,4),k=s("code",null,"key",-1),F=s("code",null,"obj",-1),S=s("code",null,"queryKey",-1),x={href:"https://router.vuejs.org/",target:"_blank",rel:"noopener noreferrer"},M=r(`<p>The query string will be updated using either <code>router.push</code> or <code>router.replace</code> depending on the value of parameter <code>mode</code>.</p><p>If the query string contains a value when this is called, the object will be updated with that value immediately.</p><p>If the object being bound to has <code>$metadata</code>, information from that metadata will be used to serialize and parse values to and from the query string. Otherwise, <code>String(value)</code> will be used to serialize the value, and the <code>parse</code> parameter (if provided) will be used to parse the value from the query string.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">bindToQueryString</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;coalesce-vue&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// In the &#39;created&#39; Vue lifecycle hook on a component:</span></span>
<span class="line"><span style="color:#DCDCAA;">created</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// Bind pagination information to the query string:</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">bindToQueryString</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">listViewModel</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">$params</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;pageSize&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;pageSize&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">v</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> +</span><span style="color:#9CDCFE;">v</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// Assuming the component has an &#39;activeTab&#39; data member:</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">bindToQueryString</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;activeTab&#39;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),z=r(`<p>When <code>model</code> is created (i.e. its primary key becomes non-null), replace the current URL with one that includes uses primary key for the route parameter named by <code>routeParamName</code>.</p><p>The query string will not be kept when the route is changed unless <code>true</code> is given to <code>keepQuery</code>.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">bindKeyToRouteOnCreate</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;coalesce-vue&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// In the &#39;created&#39; Vue lifecycle hook on a component:</span></span>
<span class="line"><span style="color:#DCDCAA;">created</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">viewModel</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">$load</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">    } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#DCDCAA;">bindKeyToRouteOnCreate</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">viewModel</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),j={class:"custom-container tip"},I=s("p",{class:"custom-container-title"},"Note",-1),O={href:"https://developer.mozilla.org/en-US/docs/Web/API/History_API",target:"_blank",rel:"noopener noreferrer"},P={href:"https://router.vuejs.org/",target:"_blank",rel:"noopener noreferrer"},V=s("code",null,"<router-view>",-1),N=s("h2",{id:"advanced-model-functions",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#advanced-model-functions","aria-hidden":"true"},"#"),e(" Advanced Model Functions")],-1),q=s("p",null,[e("The following functions exported from "),s("code",null,"coalesce-vue"),e(" can be used with your models.")],-1),R={class:"custom-container tip"},L=s("p",{class:"custom-container-title"},"Note",-1),B=s("p",null,"While you're absolutely free to use them in your own code and can rely on their interface and behavior to remain consistent, you will find that you seldom need to use them directly - that's why we've split them into their own section here in the documentation.",-1),W=r("<p>Given any JavaScript value <code>value</code>, convert it into a valid implementation of the value or type described by <code>metadata</code>.</p><p>For metadata describing a primitive or primitive-like value, the input will be parsed into a valid implementation of the correct JavaScript type. For example, for <code>metadata</code> that describes a boolean, a string <code>&quot;true&quot;</code> will return a boolean <code>true</code>, and ISO 8601 date strings will result in a JavaScript <code>Date</code> object.</p><p>For metadata describing a type, the input object will be mutated into a valid implementation of the appropriate model interface. Missing properties will be set to null, and any descendent properties of the provided object will be recursively processed with <code>convertToModel</code>.</p><p>If any values are encountered that are fundamentally incompatible with the requested type described by the metadata, an error will be thrown.</p>",4),Z=s("p",null,[e("Performs the same operations as "),s("code",null,"convertToModel"),e(", except that any objects encountered will not be mutated - instead, a new object or array will always be created.")],-1),J=s("p",null,"Maps the input to a representation suitable for JSON serialization.",-1),K=s("p",null,[e("Will not serialize child objects or collections whose metadata includes "),s("code",null,"dontSerialize"),e(". Will only recurse to a maximum depth of 3.")],-1),$=s("p",null,[s("a",{id:"VueModelDisplayFunctions"})],-1),Q=s("p",null,[e("Returns a string representing the "),s("code",null,"model"),e(" suitable for display in a user interface.")],-1),U=s("code",null,"displayProp",-1),H=s("code",null,"displayProp",-1),G=s("p",null,[e("See "),s("a",{href:"#displayoptions"},"DisplayOptions"),e(" for available options.")],-1),X=s("p",null,"Returns a string representing the specified property of the given object suitable for display in a user interface.",-1),Y=s("p",null,[e("The property can either be a string, representing one of the model's properties, or the actual "),s("code",null,"Property"),e(" metadata object of the property.")],-1),ee=s("p",null,[e("See "),s("a",{href:"#displayoptions"},"DisplayOptions"),e(" for available options.")],-1),se=r(`<p>Returns a string representing the given value (described by the given metadata).</p><p>See <a href="#displayoptions">DisplayOptions</a> for available options.</p><h2 id="displayoptions" tabindex="-1"><a class="header-anchor" href="#displayoptions" aria-hidden="true">#</a> DisplayOptions</h2><p>The following options are available to functions in coalesce-vue that render a value or object for display:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#C586C0;">export</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">interface</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">DisplayOptions</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">/** Date format options. One of:</span></span>
<span class="line"><span style="color:#6A9955;">   * - A UTS#35 date format string (https://date-fns.org/docs/format)</span></span>
<span class="line"><span style="color:#6A9955;">   * - An object with options for https://date-fns.org/docs/format or https://github.com/marnusw/date-fns-tz#format, including a string \`format\` for the format itself. If a \`timeZone\` option is provided per https://github.com/marnusw/date-fns-tz#format, the date being formatted will be converted to that timezone.</span></span>
<span class="line"><span style="color:#6A9955;">   * - An object with options for https://date-fns.org/docs/formatDistance */</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">format</span><span style="color:#D4D4D4;">?:</span></span>
<span class="line"><span style="color:#D4D4D4;">    | </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#D4D4D4;">    | ({</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">/** A UTS#35 date format string (https://date-fns.org/docs/format) */</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">format</span><span style="color:#D4D4D4;">: </span><span style="color:#9CDCFE;">string</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">      } &amp; </span><span style="color:#9CDCFE;">Parameters</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#9CDCFE;">typeof</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">format</span><span style="color:#D4D4D4;">&gt;[</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">])</span></span>
<span class="line"><span style="color:#D4D4D4;">    | {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">/** Format date with https://date-fns.org/docs/formatDistanceToNow */</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C8C8C8;">distance</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">/** Append/prepend \`&#39;in&#39;\` or \`&#39;ago&#39;\` if date is after/before now. Default \`true\`. */</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">addSuffix</span><span style="color:#D4D4D4;">?: </span><span style="color:#9CDCFE;">boolean</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">/** Include detail smaller than one minute. Default \`false\`. */</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">includeSeconds</span><span style="color:#D4D4D4;">?: </span><span style="color:#9CDCFE;">boolean</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">      };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">collection</span><span style="color:#D4D4D4;">?: {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">/** The maximum number of items to display individually.</span></span>
<span class="line"><span style="color:#6A9955;">     * When there are more than this number of items, the count of items will be displayed instead.</span></span>
<span class="line"><span style="color:#6A9955;">     * Default \`5\`.</span></span>
<span class="line"><span style="color:#6A9955;">     * */</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">enumeratedItemsMax</span><span style="color:#D4D4D4;">?: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">/** The separator to place between enumerated items. Default \`&#39;, &#39;\` */</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">enumeratedItemsSeparator</span><span style="color:#D4D4D4;">?: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">  };</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),ne={class:"custom-container tip"},ae=s("p",{class:"custom-container-title"},"Note",-1),oe=s("code",null,"formatDistanceToNow",-1),te={href:"https://v2.vuejs.org/v2/api/#key",target:"_blank",rel:"noopener noreferrer"},le=s("h2",{id:"time-zones",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#time-zones","aria-hidden":"true"},"#"),e(" Time Zones")],-1),ie=s("p",null,[e("In Coalesce Vue, all "),s("code",null,"DateTimeOffset"),e("-based properties, for both inputs and display-only contexts, are by default formatted into the user's computer's system time zone. This is largely just a consequence of how the JavaScript Date type works. However, this behavior can be overridden by configuring a global default timezone, or by providing a time zone name to individual usages.")],-1),re=s("p",null,[e("Fields with a type of "),s("code",null,"DateTime"),e(" are agnostic to time zone and UTC offset and so are not subject to any of the following rules.")],-1),pe={href:"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones",target:"_blank",rel:"noopener noreferrer"},ce=s("code",null,'"America/Los_Angeles"',-1),de=s("p",null,"The time zone provided here is used in the following ways:",-1),ue=s("code",null,"DisplayOptions.format.timeZone",-1),De=s("a",{href:"#member-modeldisplay"},"modelDisplay",-1),ye=s("a",{href:"#member-propdisplay"},"propDisplay",-1),me=s("a",{href:"#member-valuedisplay"},"valueDisplay",-1),he=s("code",null,"timeZone",-1),ve=s("li",null,"It will be used when serializing DateTimeOffset fields into JSON DTOs, representing the ISO 8601 date string in the specified time zone rather than in the user's computer's system time zone.",-1),fe=s("p",null,[e("Returns the current configured default time zone. Default is "),s("code",null,"null"),e(", falling back on the user's computer's system time zone.")],-1);function be(_e,ge){const o=p("RouterLink"),l=p("router-link"),i=p("ExternalLinkIcon"),t=p("Prop");return u(),D("div",null,[m,c(" MARKER:summary "),s("p",null,[e("The model layer, generated as "),h,e(", contains a set of TypeScript interfaces that represent each client-exposed type in your data model. Each interface contains all the "),n(o,{to:"/modeling/model-components/properties.html"},{default:a(()=>[e("Properties")]),_:1}),e(" of that type, as well as a "),v,e(" property that references the "),n(o,{to:"/stacks/vue/layers/metadata.html"},{default:a(()=>[e("metadata")]),_:1}),e(" object for that type. Enums and "),n(o,{to:"/modeling/model-components/data-sources.html"},{default:a(()=>[e("Data Sources")]),_:1}),e(" are also represented in the model layer.")]),c(" MARKER:summary-end "),f,s("nav",b,[s("ul",null,[s("li",null,[n(l,{to:"#concepts"},{default:a(()=>[e("Concepts")]),_:1}),s("ul",null,[s("li",null,[n(l,{to:"#model"},{default:a(()=>[e("Model")]),_:1})]),s("li",null,[n(l,{to:"#datasource"},{default:a(()=>[e("DataSource")]),_:1})])])]),s("li",null,[n(l,{to:"#model-functions"},{default:a(()=>[e("Model Functions")]),_:1})]),s("li",null,[n(l,{to:"#advanced-model-functions"},{default:a(()=>[e("Advanced Model Functions")]),_:1})]),s("li",null,[n(l,{to:"#displayoptions"},{default:a(()=>[e("DisplayOptions")]),_:1})]),s("li",null,[n(l,{to:"#time-zones"},{default:a(()=>[e("Time Zones")]),_:1})])])]),_,s("p",null,[e("The model layer is fairly simple - the only main concept it introduces on top of the "),n(o,{to:"/stacks/vue/layers/metadata.html"},{default:a(()=>[e("Metadata Layer")]),_:1}),e(" is the notion of interfaces and enums that mirror the C# types in your data model. As with the "),n(o,{to:"/stacks/vue/layers/metadata.html"},{default:a(()=>[e("Metadata Layer")]),_:1}),e(", the "),s("a",g,[e("source code of coalesce-vue"),n(i)]),e(" is a great documentation supplement to this page.")]),C,s("p",null,[e("An interface describing an instance of a class type from your application's data model. All Model interfaces contain members for all the "),n(o,{to:"/modeling/model-components/properties.html"},{default:a(()=>[e("Properties")]),_:1}),e(" of that type, as well as a "),w,e(" property that references the metadata object for that type.")]),E,s("p",null,[e("A class-based representation of a "),n(o,{to:"/modeling/model-components/data-sources.html"},{default:a(()=>[e("Data Source")]),_:1}),e(" containing properties for any of the "),n(o,{to:"/modeling/model-components/data-sources.html#custom-parameters"},{default:a(()=>[e("Custom Parameters")]),_:1}),e(" of the data source, as well as a "),T,e(" property that references the metadata object for the data source.")]),A,n(t,{def:"bindToQueryString(vue: Vue, obj: {}, key: string, queryKey: string = key, parse?: (v: any) => any, mode: 'push' | 'replace' = 'replace')",lang:"ts"}),s("p",null,[e("Binds property "),k,e(" of "),F,e(" to query string parameter "),S,e(". When the object's value changes, the query string will be updated using "),s("a",x,[e("vue-router"),n(i)]),e(". When the query string changes, the object's value will be updated.")]),M,n(t,{def:"bindKeyToRouteOnCreate(vue: Vue, model: Model<ModelType>, routeParamName: string = 'id', keepQuery: boolean = false)",lang:"ts"}),z,s("div",j,[I,s("p",null,[e("The route will be replaced directly via the "),s("a",O,[e("HTML5 History API"),n(i)]),e(" such that "),s("a",P,[e("vue-router"),n(i)]),e(" will not observe the change as an actual route change, preventing the current view from being recreated if a path-based key is being used on the application's "),V,e(" component.")])]),N,q,s("div",R,[L,s("p",null,[e("These functions are used to implement the "),n(o,{to:"/stacks/vue/overview.html"},{default:a(()=>[e("higher-order layers")]),_:1}),e(" in the Vue stack.")]),B]),n(t,{def:"convertToModel(value: any, metadata: Value | ClassType): any",lang:"ts"}),W,n(t,{def:"mapToModel(value: any, metadata: Value | ClassType): any",lang:"ts"}),Z,n(t,{def:"mapToDto(value: any, metadata: Value | ClassType): any",lang:"ts"}),J,K,$,n(t,{def:"modelDisplay(model: Model, options?: DisplayOptions): string",lang:"ts"}),Q,s("p",null,[e("Uses the "),U,e(" defined on the object's metadata. If no "),H,e(" is defined, the object will be displayed as JSON. The display prop on a model can be defined in C# with "),n(o,{to:"/modeling/model-components/attributes/list-text.html"},{default:a(()=>[e("[ListText]")]),_:1}),e(".")]),G,n(t,{def:"propDisplay(model: Model, prop: Property | string, options?: DisplayOptions): string",lang:"ts"}),X,Y,ee,n(t,{def:"valueDisplay(value: any, metadata: Value, options?: DisplayOptions): string",lang:"ts"}),se,s("div",ne,[ae,s("p",null,[e("Dates rendered with the "),oe,e(" function into a Vue component will not automatically be updated in realtime. If this is needed, you should use a strategy like using a "),s("a",te,[e("key"),n(i)]),e(" that you periodically update to force a re-render.")])]),le,ie,re,n(t,{def:"setDefaultTimeZone(timeZoneName: string | null): void",lang:"ts"}),s("p",null,[e("Gets or sets the default time zone used by Coalesce. The time zone should be an "),s("a",pe,[e("IANA Time Zone Database"),n(i)]),e(" name, e.g. "),ce,e(".")]),de,s("ul",null,[s("li",null,[e("It will be used as "),ue,e(" if no other value was provided for this option. This is used by functions "),De,e(", "),ye,e(", and "),me,e(", as well as the "),n(o,{to:"/stacks/vue/coalesce-vue-vuetify/components/c-display.html"},{default:a(()=>[e("c-display")]),_:1}),e(" component.")]),s("li",null,[e("It will be used by "),n(o,{to:"/stacks/vue/coalesce-vue-vuetify/components/c-datetime-picker.html"},{default:a(()=>[e("c-datetime-picker")]),_:1}),e(", used to both interpret the user input and display the selected date. This can also be set on individual component usages via the "),he,e(" prop.")]),ve]),n(t,{def:"getDefaultTimeZone(): string | null",lang:"ts"}),fe])}const we=d(y,[["render",be],["__file","models.html.vue"]]);export{we as default};
