import{_ as c,r as t,o as r,c as i,b as s,d as n,e as a,w as e,a as o}from"./app.33ffcc50.js";const D={},d=s("h1",{id:"getting-started-with-knockout",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#getting-started-with-knockout","aria-hidden":"true"},"#"),n(" Getting Started with Knockout")],-1),y=s("h2",{id:"creating-a-project",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#creating-a-project","aria-hidden":"true"},"#"),n(" Creating a Project")],-1),u={class:"custom-container warning"},C=s("p",{class:"custom-container-title"},"WARNING",-1),v=o(`<p>The quickest and easiest way to create a new Coalesce Knockout application is to use the <code>dotnet new</code> template. In your favorite shell:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">dotnet new --install IntelliTect.Coalesce.KnockoutJS.Template</span></span>
<span class="line"><span style="color:#D4D4D4;">dotnet new coalesceko</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,2),m={href:"https://www.nuget.org/packages/IntelliTect.Coalesce.KnockoutJS.Template/",target:"_blank",rel:"noopener noreferrer"},h=s("img",{src:"https://img.shields.io/nuget/v/IntelliTect.Coalesce.KnockoutJS.Template",alt:""},null,-1),b={href:"https://github.com/IntelliTect/Coalesce.KnockoutJS.Template",target:"_blank",rel:"noopener noreferrer"},g=s("h2",{id:"data-modeling",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#data-modeling","aria-hidden":"true"},"#"),n(" Data Modeling")],-1),E=s("p",null,"At this point, you can open up the newly-created solution in Visual Studio and run your application. However, your application won't do much without a data model, so you will probably want to do the following before running:",-1),_=s("code",null,"DbSet<>",-1),w=s("code",null,"AppDbContext",-1),f=s("code",null,"ApplicationUser",-1),k=o("<li><p>Run <code>dotnet ef migrations add Init</code> (Init can be any name) in the data project to create an initial database migration.</p></li><li><p>Run Coalesce&#39;s code generation by either:</p><ul><li>Running <code>dotnet coalesce</code> in the web project&#39;s root directory</li><li>Running the <code>coalesce</code> npm script (Vue) or gulp task (Knockout) in the Task Runner Explorer</li></ul></li>",2),A=s("p",null,"You're now at a point where you can start creating your own pages!",-1),F=s("h2",{id:"building-pages-features",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#building-pages-features","aria-hidden":"true"},"#"),n(" Building Pages & Features")],-1),x=s("code",null,"Person",-1),B=s("code",null,"dotnet coalesce",-1),P=o(`<div class="language-c# line-numbers-mode" data-ext="c#"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">namespace</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">MyApplication</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">Data</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">Models</span><span style="color:#D4D4D4;"> </span></span>
<span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Person</span></span>
<span class="line"><span style="color:#D4D4D4;">    {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">PersonId</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; }</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">string</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">Name</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; }</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">DateTimeOffset</span><span style="color:#D4D4D4;">? </span><span style="color:#9CDCFE;">BirthDate</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can create a details page for a Person by creating:</p><ul><li><p>A controller in <code>src/MyApplication.Web/Controllers/PersonController.cs</code>:</p><div class="language-c# line-numbers-mode" data-ext="c#"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">namespace</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">MyApplication</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">Web</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">Controllers</span></span>
<span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">partial</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">PersonController</span></span>
<span class="line"><span style="color:#D4D4D4;">    {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">IActionResult</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">Details</span><span style="color:#D4D4D4;">() =&gt; </span><span style="color:#DCDCAA;">View</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>A view in <code>src/MyApplication.Web/Views/Person/Details.cshtml</code>:</p><div class="language-razor line-numbers-mode" data-ext="razor"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Person Details</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">h1</span><span style="color:#808080;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">div</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">data-bind</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;with: person&quot;</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">dl</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">class</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;dl-horizontal&quot;</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">dt</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Name </span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">dt</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">dd</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">data-bind</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;text: name&quot;</span><span style="color:#808080;">&gt;&lt;/</span><span style="color:#569CD6;">dd</span><span style="color:#808080;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">dt</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">Date of Birth </span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">dt</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">dd</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">data-bind</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;moment: birthDate, format: &#39;MM/DD/YYYY hh:mm a&#39;&quot;</span><span style="color:#808080;">&gt;&lt;/</span><span style="color:#569CD6;">dd</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">dl</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">div</span><span style="color:#808080;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">@section</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">Scripts</span></span>
<span class="line"><span style="color:#C586C0;">{</span></span>
<span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">src</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;~/js/person.details.js&quot;</span><span style="color:#808080;">&gt;&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">$</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">vm</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">MyApplication</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">PersonDetails</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">ko</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">applyBindings</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">vm</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">vm</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">load</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">    });</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#C586C0;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>And a script in <code>src/MyApplication.Web/Scripts/person.details.ts</code>:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;">/// </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">reference</span><span style="color:#6A9955;"> </span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;viewmodels.generated.d.ts&quot;</span><span style="color:#6A9955;"> </span><span style="color:#808080;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">module</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">MyApplication</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">export</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">PersonDetails</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">person</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">ViewModels</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">Person</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#DCDCAA;">load</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Coalesce</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Utilities</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">GetUrlParameter</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;id&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;"> != </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;"> != </span><span style="color:#CE9178;">&#39;&#39;</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">person</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">load</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>With these pieces in place, we now have a functioning page that will display details about a person. We can start up the application and navigate to <code>/Person/Details?id=1</code> (assuming a person with ID 1 exists - if not, navigate to <code>/Person/Table</code> and create one).</p>`,4);function q(M,T){const l=t("RouterLink"),p=t("ExternalLinkIcon");return r(),i("div",null,[d,y,s("div",u,[C,s("p",null,[n("The Coalesce Knockout.js stack is deprecated and will be receiving only critical bug fixes going forward. You are strongly encouraged to start all new Coalesce projects with "),a(l,{to:"/stacks/vue/getting-started.html"},{default:e(()=>[n("Vue")]),_:1}),n(".")])]),v,s("p",null,[s("a",m,[h,a(p)]),n(" • "),s("a",b,[n("View on GitHub"),a(p)])]),g,E,s("ul",null,[s("li",null,[s("p",null,[n("Create an initial "),a(l,{to:"/modeling/model-types/entities.html"},{default:e(()=>[n("Data Model")]),_:1}),n(" by adding EF entity classes to the data project and the corresponding "),_,n(" properties to "),w,n(". You will notice that the starter project includes a single model, "),f,n(", to start with. Feel free to change this model or remove it entirely. Read "),a(l,{to:"/modeling/model-types/entities.html"},{default:e(()=>[n("Entity Models")]),_:1}),n(" for more information about creating a data model.")])]),k]),A,F,s("p",null,[n("Lets say we've created a "),a(l,{to:"/modeling/model-types/entities.html"},{default:e(()=>[n("model")]),_:1}),n(" called "),x,n(" as follows, and we've ran code generation with "),B,n(":")]),P,s("p",null,[n("From this point, one can start adding more fields, more features, and more flair to the page. Check out all the other documentation in the sidebar to see what else Coalesce has to offer, including the "),a(l,{to:"/stacks/ko/overview.html"},{default:e(()=>[n("Knockout Overview")]),_:1}),n(".")])])}const j=c(D,[["render",q],["__file","getting-started.html.vue"]]);export{j as default};
