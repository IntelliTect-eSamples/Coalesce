import{_ as d,r as l,o as c,c as p,b as e,d as o,e as t,w as r}from"./app.33ffcc50.js";const u={},b=e("h1",{id:"typescript-external-viewmodels",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#typescript-external-viewmodels","aria-hidden":"true"},"#"),o(" TypeScript External ViewModels")],-1),m={href:"https://knockoutjs.com/",target:"_blank",rel:"noopener noreferrer"},h={class:"table-of-contents"},_=e("h2",{id:"base-members",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#base-members","aria-hidden":"true"},"#"),o(" Base Members")],-1),f=e("h2",{id:"model-specific-members",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#model-specific-members","aria-hidden":"true"},"#"),o(" Model-Specific Members")],-1),k=e("h3",{id:"data-properties",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#data-properties","aria-hidden":"true"},"#"),o(" Data Properties")],-1),v=e("p",null,[o("For each exposed property on the underlying EF POCO, a "),e("code",null,"KnockoutObservable<T>"),o(" property will exist on the TypeScript model. For navigation properties, these will be typed with the corresponding TypeScript ViewModel for the other end of the relationship. For collections (including collection navigation properties), these properties will be "),e("code",null,"KnockoutObservableArray<T>"),o(" objects.")],-1),y=e("h3",{id:"enum-members",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#enum-members","aria-hidden":"true"},"#"),o(" Enum Members")],-1),x=e("p",null,[o("For each "),e("code",null,"enum"),o(" property on your POCO, the following will be created:")],-1),w=e("p",null,[o("A "),e("code",null,"KnockoutComputed<string>"),o(" property that will provide the text to display for that property.")],-1);function g(M,K){const a=l("RouterLink"),i=l("ExternalLinkIcon"),n=l("router-link"),s=l("Prop");return c(),p("div",null,[b,e("p",null,[o("For all "),t(a,{to:"/modeling/model-types/external-types.html"},{default:r(()=>[o("External Types")]),_:1}),o(" in your model, Coalesce will generate a TypeScript class that provides a bare-bones representation of that type's properties.")]),e("p",null,[o("These ViewModels are dependent on "),e("a",m,[o("Knockout"),t(i)]),o(", and are designed to be used directly from Knockout bindings in your HTML. All data properties on the generated model are Knockout observables.")]),e("nav",h,[e("ul",null,[e("li",null,[t(n,{to:"#base-members"},{default:r(()=>[o("Base Members")]),_:1})]),e("li",null,[t(n,{to:"#model-specific-members"},{default:r(()=>[o("Model-Specific Members")]),_:1}),e("ul",null,[e("li",null,[t(n,{to:"#data-properties"},{default:r(()=>[o("Data Properties")]),_:1})]),e("li",null,[t(n,{to:"#enum-members"},{default:r(()=>[o("Enum Members")]),_:1})])])])])]),_,e("p",null,[o("The TypeScript ViewModels for external types do not have a common base class, and do not have any of the behaviors or convenience properties that the regular "),t(a,{to:"/stacks/ko/client/view-model.html"},{default:r(()=>[o("TypeScript ViewModels")]),_:1}),o(" for database-mapped classes have.")]),f,k,t(s,{def:`
public personId: KnockoutObservable<number | null> = ko.observable(null);
public fullName: KnockoutObservable<string | null> = ko.observable(null);
public gender: KnockoutObservable<number | null> = ko.observable(null);
public companyId: KnockoutObservable<number | null> = ko.observable(null);
public company: KnockoutObservable<ViewModels.Company | null> = ko.observable(null);
public addresses: KnockoutObservableArray<ViewModels.Address> = ko.observableArray([]);
public birthDate: KnockoutObservable<moment.Moment | null> = ko.observable(moment());`,lang:"ts",id:"data-property-members"}),v,y,x,t(s,{def:"public genderText: KnockoutComputed<string | null>",lang:"ts"}),w])}const O=d(u,[["render",g],["__file","external-view-model.html.vue"]]);export{O as default};
