import{_ as c,r as a,o as d,c as h,b as e,d as t,e as s,w as o,a as u}from"./app.33ffcc50.js";const p={},m=e("h1",{id:"typescript-method-objects",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#typescript-method-objects","aria-hidden":"true"},"#"),t(" TypeScript Method Objects")],-1),b=u(`<p>Here&#39;s an example for a method called Rename that takes a single parameter &#39;string name&#39; and returns a string.</p><div class="language-c# line-numbers-mode" data-ext="c#"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">string</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">Rename</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">string</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">FirstName</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">FullName</span><span style="color:#D4D4D4;">; </span><span style="color:#6A9955;">// Return the new full name of the person.</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),f={class:"table-of-contents"},g=e("h2",{id:"base-members",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#base-members","aria-hidden":"true"},"#"),t(" Base Members")],-1),_=e("p",null,"The following members are available on the method object for all client methods:",-1),v=e("p",null,"Observable that will contain the results of the method call after it is complete.",-1),w=e("p",null,"Observable with the raw, deserialized JSON result of the method call. If the method call returns an object, this will contain the deserialized JSON object from the server before it has been loaded into ViewModels and its properties loaded into observables.",-1),D=e("p",null,"Observable boolean which is true while the call to the server is pending.",-1),y=e("p",null,"If the method was not successful, this contains exception information.",-1),k=e("p",null,"Observable boolean that indicates whether the method call was successful or not.",-1),O=e("h2",{id:"listresult-t-base-members",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#listresult-t-base-members","aria-hidden":"true"},"#"),t(),e("code",null,"ListResult<T>"),t(" Base Members")],-1),C=e("p",null,[t("For methods that return a "),e("code",null,"ListResult<T>"),t(", the following additional members on the method object will be available:")],-1),M=e("p",null,"Page number of the results.",-1),T=e("p",null,"Page size of the results.",-1),R=e("p",null,"Total number of possible result pages.",-1),L=e("p",null,"Total number of results.",-1),x=e("h2",{id:"method-specific-members",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#method-specific-members","aria-hidden":"true"},"#"),t(" Method-specific Members")],-1),j=e("p",null,[t("Function that takes all the method parameters and a callback. If "),e("code",null,"reload"),t(" is true, the ViewModel or ListViewModel that owns the method will be reloaded after the call is complete, and only after that happens will the callback be called.")],-1),V=e("p",null,"Class with one observable member per method argument for binding method arguments to user input. Only generated for methods with arguments.",-1),A=e("p",null,"Default instance of the args class. Only generated for methods with arguments.",-1),K=e("p",null,"Function for invoking the method using the args class. The default instance of the args class will be used if none is provided. Only generated for methods with arguments.",-1),P=e("p",null,[t("Simple interface using browser "),e("code",null,"prompt()"),t(" input boxes to prompt the user for the required data for the method call. The call is then made with the data provided. Only generated for methods with arguments.")],-1),E={href:"https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL",target:"_blank",rel:"noopener noreferrer"},F=e("code",null,"src",-1),S=e("code",null,"image",-1),N=e("code",null,"video",-1),B=e("code",null,"this.args",-1);function I(U,z){const n=a("RouterLink"),i=a("router-link"),l=a("Prop"),r=a("ExternalLinkIcon");return d(),h("div",null,[m,e("p",null,[t("For each "),s(n,{to:"/modeling/model-components/methods.html"},{default:o(()=>[t("Custom Method")]),_:1}),t(" you define, a class will be created on the corresponding TypeScript ViewModel (instance methods) or ListViewModel (static methods) that contains the properties and functions for interaction with the method. This class is accessible through a static property named after the method. An instance of this class will also be created on each instance of its parent - this instance is in a property with the camel-cased name of the method.")]),b,e("nav",f,[e("ul",null,[e("li",null,[s(i,{to:"#base-members"},{default:o(()=>[t("Base Members")]),_:1})]),e("li",null,[s(i,{to:"#listresult-t-base-members"},{default:o(()=>[t("ListResult<T> Base Members")]),_:1})]),e("li",null,[s(i,{to:"#method-specific-members"},{default:o(()=>[t("Method-specific Members")]),_:1})])])]),g,_,s(l,{def:"public result: KnockoutObservable<string>",lang:"ts"}),v,s(l,{def:"public rawResult: KnockoutObservable<Coalesce.ApiResult>",lang:"ts"}),w,s(l,{def:"public isLoading: KnockoutObservable<boolean>",lang:"ts"}),D,s(l,{def:"public message: KnockoutObservable<string>",lang:"ts"}),y,s(l,{def:"public wasSuccessful: KnockoutObservable<boolean>",lang:"ts"}),k,O,C,s(l,{def:"public page: KnockoutObservable<number>",lang:"ts"}),M,s(l,{def:"public pageSize: KnockoutObservable<number>",lang:"ts"}),T,s(l,{def:"public pageCount: KnockoutObservable<number>",lang:"ts"}),R,s(l,{def:"public totalCount: KnockoutObservable<number>",lang:"ts"}),L,x,s(l,{def:"public static Rename = class Rename extends Coalesce.ClientMethod<Person, string> { ... }",lang:"ts",id:"method-object-class-declaration"}),e("p",null,[t("Declaration of the method object class. This will be generated on the parent "),s(n,{to:"/stacks/ko/client/view-model.html"},{default:o(()=>[t("ViewModel")]),_:1}),t(" or "),s(n,{to:"/stacks/ko/client/list-view-model.html"},{default:o(()=>[t("ListViewModel")]),_:1}),t(".")]),s(l,{def:"public readonly rename = new Person.Rename(this)",lang:"ts",id:"method-object-instance"}),e("p",null,[t("Default instance of the method for easy calling of the method without needing to manually instantiate the class. This will be generated on the parent "),s(n,{to:"/stacks/ko/client/view-model.html"},{default:o(()=>[t("ViewModel")]),_:1}),t(" or "),s(n,{to:"/stacks/ko/client/list-view-model.html"},{default:o(()=>[t("ListViewModel")]),_:1}),t(".")]),s(l,{def:"public invoke: (name: string, callback: (result: string) => void = null, reload: boolean = true): JQueryPromise<any>",lang:"ts"}),j,s(l,{def:"public static Args = class Args { public name: KnockoutObservable<string> = ko.observable(null); }",lang:"ts",id:"method-args-class-declaration"}),V,s(l,{def:"public args = new Rename.Args()",lang:"ts",id:"method-args-instance"}),A,s(l,{def:"public invokeWithArgs: (args = this.args, callback?: (result: string) => void, reload: boolean = true) => JQueryPromise<any>",lang:"ts"}),K,s(l,{def:"public invokeWithPrompts: (callback: (result: string) => void = null, reload: boolean = true) => JQueryPromise<any>",lang:"ts"}),P,s(l,{def:"public resultObjectUrl: KnockoutObservable<string | null>",lang:"ts"}),e("p",null,[t("Observable that will contain an "),e("a",E,[t("Object URL"),s(r)]),t(" representing the last successful invocation result. Only generated for "),s(n,{to:"/modeling/model-components/methods.html#file-downloads"},{default:o(()=>[t("methods that return a file")]),_:1}),t(".")]),s(l,{def:"public url: KnockoutComputed<string>",lang:"ts"}),e("p",null,[t("The URL for the method. Can be useful for using as the "),F,t(" attribute of an "),S,t(" or "),N,t(" HTML element for file-downloading methods. Any arguments will be populated from "),B,t(". Only generated for HTTP GET methods, as configured by "),s(n,{to:"/modeling/model-components/attributes/controller-action.html"},{default:o(()=>[t("[ControllerAction]")]),_:1}),t(".")])])}const H=c(p,[["render",I],["__file","methods.html.vue"]]);export{H as default};
